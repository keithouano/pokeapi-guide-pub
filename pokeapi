#!/usr/bin/env node

const chalk = require('chalk')
const rl = require('readline');

const readline = rl.createInterface({
  input: process.stdin,
  output: process.stdout
})

const usageText = `
Application to retrieve information about Pokemon from pokeapi.co

Usage:
  Input keyword can be Pokemon Name or ID or 'x' to exit the program
`

const questioner = () => {
  return new Promise((resolve, reject) => {
    const q = chalk.blue(`Enter Pokemon Name or ID or 'x' to exit\n>> `)
    readline.question(q, (answer) => {
      resolve(answer)
    })
  })
}

const main = async () => {
  console.log(usageText);
  var PokeApi = require("./src");
  var P = new PokeApi();
    
  while (true) {
    ans = await questioner()

    if (ans === 'x') {
      console.log(chalk.yellow(`\nExiting Pokeapi Terminal... Done.\n`))
      break;
    }
    console.log(chalk.yellow(`Searching Pokemon: ${ans}`))

    data = await P.getPokemonByNameOrId(ans)
      .then(response => response)
      .catch(function(error) {
        console.log("There was an ERROR: ", error);
        return null;
      });
    
    if (data) {
      console.log('ID:', chalk.yellow(data.id))
      console.log('Name:', chalk.yellow(data.name))
      if (data.types) {
        console.log(`Types:`, chalk.yellow(data.types.map(t => (t.type)).join(", ")))
      }
      if (data.stats) {
        console.log('Stats:')
        const stats = data.stats
        stats.forEach((s) => {
          console.log(` -`, chalk.yellow(`${s.name}: ${s.value}`))
        });
      }
      if (data.encounters) {
        const encounters = data.encounters
        if (encounters.length) {
          console.log('Encounters:')
          encounters.forEach((enc) => {
            console.log(` -`, chalk.yellow(`${enc.location_area}: ${enc.methods}`))
          });
        } else {
          console.log('Encounters: -')
        }
      }
      // console.log('data:', data)
    }
  } // end while
  readline.close()
  process.exit(0);
}

main()
